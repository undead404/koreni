import { createWriteStream } from 'node:fs';
import { mkdir } from 'node:fs/promises';
import path from 'node:path';
import { pipeline } from 'node:stream/promises';

import { readFile, utils, type WorkBook } from 'xlsx';

interface DataRow {
  [key: string]: any;
}

function readXlsxFile(filePath: string): WorkBook {
  return readFile(filePath);
}

const COLUMN_MAPPING = new Map([
  ['Prénom', "Ім'я"],
  ['Nom', 'Прізвище'],
  ['Jour', 'День народження'],
  ['Mois', 'Місяць народження'],
  ['Année', 'Рік народження'],
  ['Lieu', 'Місце народження'],
  ['Age ', 'Вік при одруженні'],
  ['Maison', 'Будинок народження'],
  ['Parrains', 'Хрещені'],
  ['Jour_1', 'День смерті'],
  ['Mois_1', 'Місяць смерті'],
  ['Année_1', 'Рік смерті'],
  ['Lieu_1', 'Місце смерті'],
  ['Age', 'Вік смерті'],
  ['Cause', 'Причина смерті'],
  ['Maison_1', 'Будинок смерті'],
  ['Autres', 'Інше'],
  ['Père', 'Батько'],
  ['Parents', 'Батьки батька'],
  ['Mère', 'Мати'],
  ['Parents_1', 'Батьки матері'],
  ['Jour_2', 'День одруження'],
  ['Mois_2', 'Місяць одруження'],
  ['Année_2', 'Рік одруження'],
  ['Témoins', 'Свідки одруження'],
  ['Maison_2', 'Будинок одруження'],
  ['Lieu_2', 'Місце одруження'],
  ['Age_1', 'Вік одруження'],
  ['Epoux/Epouse', 'Подружжя'],
  ['Jour_3', 'День народження подружжя'],
  ['Mois_3', 'Місяць народження подружжя'],
  ['Année_3', 'Рік народження подружжя'],
  ['Lieu_3', 'Місце народження подружжя'],
  ['Maison_3', 'Будинок народження подружжя'],
  ['Parents_2', 'Батьки подружжя'],
  ['Jour_4', 'День смерті подружжя'],
  ['Mois_4', 'Місяць смерті подружжя'],
  ['Année_4', 'Рік смерті подружжя'],
  ['Lieu_4', 'Місце смерті подружжя'],
  ['Age_2', 'Вік смерті подружжя'],
  ['Cause_1', 'Причина смерті подружжя'],
  ['Maison_4', 'Будинок смерті подружжя'],
  ['Profession', 'Професія'],
  ['Domicile', 'Місце проживання'],
  ['Rolnik', null],
  ['Sianozaci', null],
  ['Type de maison', 'Тип будинку'],
  ['Profesion', 'Професія'],
  ['Election 1922', null],
  ['profesion', 'Професія'],
  ['__EMPTY', null],
  ['Prenom', "Ім'я"],
  ['Domicle', 'Місце проживання'],
  ['Domicile ', 'Місце проживання'],
]);

function mergeSheets(workbook: WorkBook): DataRow[] {
  console.log(`Merging sheets from ${workbook.Props?.Title}`);
  const mergedData: DataRow[] = workbook.SheetNames.flatMap((sheetName) => {
    console.log(sheetName);
    const sheet = workbook.Sheets[sheetName];
    return utils.sheet_to_json(sheet, { defval: '' });
  });
  //   const columnNames: Set<string> = new Set();

  //   for (const sheetName of workbook.SheetNames) {
  //     console.log(sheetName);
  //     const sheet = workbook.Sheets[sheetName];
  //     const jsonData: DataRow[] = utils.sheet_to_json(sheet, { defval: '' });

  //     for (const [rowIndex, row] of jsonData.entries()) {
  //       console.log(sheetName, rowIndex);
  //   for (const columnName of Object.keys(row)) {
  //     console.log(sheetName, rowIndex, columnName);
  //     if (columnNames.has(columnName)) {
  //       let count = 2;
  //       let newColumnName = `${columnName} ${count}`;
  //       while (columnNames.has(newColumnName)) {
  //         count++;
  //         newColumnName = `${columnName} ${count}`;
  //       }
  //       columnNames.add(newColumnName);
  //       row[newColumnName] = `${row[columnName]}`;
  //       delete row[columnName];
  //     } else {
  //       columnNames.add(columnName);
  //     }
  //   }

  //   mergedData.push(row);
  // }
  //   }

  const knownColumnNames = [
    ...new Set(mergedData.flatMap((row) => Object.keys(row))),
  ];

  // Normalize mergedData
  for (const row of mergedData) {
    for (const columnName of knownColumnNames) {
      if (row[columnName] === undefined) {
        row[columnName] = '';
      }
    }
  }

  return mergedData.map((row) => {
    const result: Record<string, unknown> = {};

    for (const [key, value] of Object.entries(row)) {
      const translatedColumnName = COLUMN_MAPPING.get(key);
      if (translatedColumnName === null) {
        // console.log(`Disabled column: ${key}`);
        continue;
      }
      if (!translatedColumnName) {
        throw new Error(`Unknown column: "${key}"`);
      }
      if (result[translatedColumnName]) {
        if (value) {
          throw new Error(
            `Duplicating columns: ${translatedColumnName}=${result[translatedColumnName]}&${key}=${value}`,
          );
        } else {
          continue;
        }
      } else {
        result[translatedColumnName] = value;
      }
    }
    return result;
  });
}

function partitionData(
  data: DataRow[],
  columnNames: string[],
): { [key: string]: DataRow[] } {
  console.log(`Partitioning data by column: ${columnNames.join(', ')}`);
  const partitionedData: { [key: string]: DataRow[] } = {};
  for (const row of data) {
    const partitionColumnName =
      columnNames.find(
        (columnName) => row[columnName] && !`${row[columnName]}`.includes('/'),
      ) ||
      columnNames.find((columnName) => row[columnName]) ||
      columnNames[0];
    let key = `${row[partitionColumnName]}`;
    if (key.startsWith('/')) {
      key = key.slice(1);
    }
    if (!partitionedData[key]) {
      partitionedData[key] = [];
    }
    partitionedData[key].push(row);
  }
  return partitionedData;
}

async function savePartitions(
  partitions: { [key: string]: DataRow[] },
  outputDirectory: string,
) {
  console.log(`Saving partitions to ${outputDirectory}`);
  try {
    await mkdir(outputDirectory, { recursive: true });
  } catch (error) {
    if (error.code !== 'EEXIST') throw error;
  }

  for (const key of Object.keys(partitions)) {
    const fileName = path.join(
      outputDirectory,
      // escape the key
      `Powiat Przemysliany - ${key.replaceAll(/[^a-z0-9]/gi, '_')}.csv`,
    );
    console.log(fileName);
    const csvData = utils.json_to_sheet(partitions[key]);
    const csvOutput = utils.sheet_to_csv(csvData);

    // Create a write stream
    const writeStream = createWriteStream(fileName, { encoding: 'utf8' });

    // Use stream pipeline to handle large data efficiently
    await pipeline(
      (async function* () {
        yield csvOutput;
      })(),
      writeStream,
    );
  }
}

async function processSpreadsheet(filePath: string, outputDirectory: string) {
  console.log(`Processing spreadsheet: ${filePath}`);
  const workbook = readXlsxFile(filePath);
  const mergedData = mergeSheets(workbook);
  const partitions = partitionData(mergedData, [
    'Місце проживання',
    'Місце народження',
    'Місце одруження',
    'Місце смерті',
  ]);
  await savePartitions(partitions, outputDirectory);
}

// Example usage
const inputFilePath = './Powiat Przemysliany.xlsx';
const outputDirectory = './data/tables';

async function main() {
  try {
    await processSpreadsheet(inputFilePath, outputDirectory);
  } catch (error) {
    console.error('Error processing spreadsheet:', error);
    process.exit(1);
  }
  process.exit(0);
}
void main();
